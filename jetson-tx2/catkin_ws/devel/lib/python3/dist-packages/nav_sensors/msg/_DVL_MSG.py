# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nav_sensors/DVL_MSG.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import nav_sensors.msg
import std_msgs.msg

class DVL_MSG(genpy.Message):
  _md5sum = "b8b06991dd9cca7403c624d30aeebcda"
  _type = "nav_sensors/DVL_MSG"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """


std_msgs/Header header
bool is_valid
nav_sensors/DVL_Info system_info
nav_sensors/DVL_Data data
#two unknowns
int64 bit_count
int64 bit_code
nav_sensors/DVL_Power power
std_msgs/String serial_number
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: nav_sensors/DVL_Info

uint16 packet_count # number of packets
uint8 packet_id
uint8 version #
uint8 system_type # System Type (should be = 76 = 0x4c for Wayfinder DVL)
uint8 system_subtype # Variant on the system type e.g frequency or transducer type
uint8 fw_major_version
uint8 fw_minor_version
uint8 fw_patch_version
uint8 fw_build_version
uint8 year
uint8 month
uint8 day
uint8 hour
uint8 minute
uint8 second
uint8 coordinate_system
================================================================================
MSG: nav_sensors/DVL_Data


geometry_msgs/Vector3 velocity # Velocity in m/s of the DVL relative tothe bottom X,Y,Z and Error components
float32 vel_error

geometry_msgs/Point position

nav_sensors/DVL_Beams beams # Range in meters from the DVL to the bottom as determined by each Beam 1-4 (in meters)
#float32 range_beam1
#float32 range_beam2
#float32 range_beam3
#float32 range_beam4

float32 mean_bottom_range # Calculated mean range (in meters) to bottom based on valid beams
float32 speed_of_sound # The speed of sound (in m/s) used for the doppler processing
int64 BT_status # Combines amplitude/correlation erroes and three beam solution information
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: nav_sensors/DVL_Beams
float32 beam1
float32 beam2
float32 beam3
float32 beam4
================================================================================
MSG: nav_sensors/DVL_Power

float32 input_voltage         # volts
float32 transmit_voltage # volts
float32 transmit_current # amps
================================================================================
MSG: std_msgs/String
string data
"""
  __slots__ = ['header','is_valid','system_info','data','bit_count','bit_code','power','serial_number']
  _slot_types = ['std_msgs/Header','bool','nav_sensors/DVL_Info','nav_sensors/DVL_Data','int64','int64','nav_sensors/DVL_Power','std_msgs/String']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,is_valid,system_info,data,bit_count,bit_code,power,serial_number

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DVL_MSG, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.is_valid is None:
        self.is_valid = False
      if self.system_info is None:
        self.system_info = nav_sensors.msg.DVL_Info()
      if self.data is None:
        self.data = nav_sensors.msg.DVL_Data()
      if self.bit_count is None:
        self.bit_count = 0
      if self.bit_code is None:
        self.bit_code = 0
      if self.power is None:
        self.power = nav_sensors.msg.DVL_Power()
      if self.serial_number is None:
        self.serial_number = std_msgs.msg.String()
    else:
      self.header = std_msgs.msg.Header()
      self.is_valid = False
      self.system_info = nav_sensors.msg.DVL_Info()
      self.data = nav_sensors.msg.DVL_Data()
      self.bit_count = 0
      self.bit_code = 0
      self.power = nav_sensors.msg.DVL_Power()
      self.serial_number = std_msgs.msg.String()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BH15B3df3d6f3q3f().pack(_x.is_valid, _x.system_info.packet_count, _x.system_info.packet_id, _x.system_info.version, _x.system_info.system_type, _x.system_info.system_subtype, _x.system_info.fw_major_version, _x.system_info.fw_minor_version, _x.system_info.fw_patch_version, _x.system_info.fw_build_version, _x.system_info.year, _x.system_info.month, _x.system_info.day, _x.system_info.hour, _x.system_info.minute, _x.system_info.second, _x.system_info.coordinate_system, _x.data.velocity.x, _x.data.velocity.y, _x.data.velocity.z, _x.data.vel_error, _x.data.position.x, _x.data.position.y, _x.data.position.z, _x.data.beams.beam1, _x.data.beams.beam2, _x.data.beams.beam3, _x.data.beams.beam4, _x.data.mean_bottom_range, _x.data.speed_of_sound, _x.data.BT_status, _x.bit_count, _x.bit_code, _x.power.input_voltage, _x.power.transmit_voltage, _x.power.transmit_current))
      _x = self.serial_number.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.system_info is None:
        self.system_info = nav_sensors.msg.DVL_Info()
      if self.data is None:
        self.data = nav_sensors.msg.DVL_Data()
      if self.power is None:
        self.power = nav_sensors.msg.DVL_Power()
      if self.serial_number is None:
        self.serial_number = std_msgs.msg.String()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 130
      (_x.is_valid, _x.system_info.packet_count, _x.system_info.packet_id, _x.system_info.version, _x.system_info.system_type, _x.system_info.system_subtype, _x.system_info.fw_major_version, _x.system_info.fw_minor_version, _x.system_info.fw_patch_version, _x.system_info.fw_build_version, _x.system_info.year, _x.system_info.month, _x.system_info.day, _x.system_info.hour, _x.system_info.minute, _x.system_info.second, _x.system_info.coordinate_system, _x.data.velocity.x, _x.data.velocity.y, _x.data.velocity.z, _x.data.vel_error, _x.data.position.x, _x.data.position.y, _x.data.position.z, _x.data.beams.beam1, _x.data.beams.beam2, _x.data.beams.beam3, _x.data.beams.beam4, _x.data.mean_bottom_range, _x.data.speed_of_sound, _x.data.BT_status, _x.bit_count, _x.bit_code, _x.power.input_voltage, _x.power.transmit_voltage, _x.power.transmit_current,) = _get_struct_BH15B3df3d6f3q3f().unpack(str[start:end])
      self.is_valid = bool(self.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.serial_number.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.serial_number.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BH15B3df3d6f3q3f().pack(_x.is_valid, _x.system_info.packet_count, _x.system_info.packet_id, _x.system_info.version, _x.system_info.system_type, _x.system_info.system_subtype, _x.system_info.fw_major_version, _x.system_info.fw_minor_version, _x.system_info.fw_patch_version, _x.system_info.fw_build_version, _x.system_info.year, _x.system_info.month, _x.system_info.day, _x.system_info.hour, _x.system_info.minute, _x.system_info.second, _x.system_info.coordinate_system, _x.data.velocity.x, _x.data.velocity.y, _x.data.velocity.z, _x.data.vel_error, _x.data.position.x, _x.data.position.y, _x.data.position.z, _x.data.beams.beam1, _x.data.beams.beam2, _x.data.beams.beam3, _x.data.beams.beam4, _x.data.mean_bottom_range, _x.data.speed_of_sound, _x.data.BT_status, _x.bit_count, _x.bit_code, _x.power.input_voltage, _x.power.transmit_voltage, _x.power.transmit_current))
      _x = self.serial_number.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.system_info is None:
        self.system_info = nav_sensors.msg.DVL_Info()
      if self.data is None:
        self.data = nav_sensors.msg.DVL_Data()
      if self.power is None:
        self.power = nav_sensors.msg.DVL_Power()
      if self.serial_number is None:
        self.serial_number = std_msgs.msg.String()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 130
      (_x.is_valid, _x.system_info.packet_count, _x.system_info.packet_id, _x.system_info.version, _x.system_info.system_type, _x.system_info.system_subtype, _x.system_info.fw_major_version, _x.system_info.fw_minor_version, _x.system_info.fw_patch_version, _x.system_info.fw_build_version, _x.system_info.year, _x.system_info.month, _x.system_info.day, _x.system_info.hour, _x.system_info.minute, _x.system_info.second, _x.system_info.coordinate_system, _x.data.velocity.x, _x.data.velocity.y, _x.data.velocity.z, _x.data.vel_error, _x.data.position.x, _x.data.position.y, _x.data.position.z, _x.data.beams.beam1, _x.data.beams.beam2, _x.data.beams.beam3, _x.data.beams.beam4, _x.data.mean_bottom_range, _x.data.speed_of_sound, _x.data.BT_status, _x.bit_count, _x.bit_code, _x.power.input_voltage, _x.power.transmit_voltage, _x.power.transmit_current,) = _get_struct_BH15B3df3d6f3q3f().unpack(str[start:end])
      self.is_valid = bool(self.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.serial_number.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.serial_number.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_BH15B3df3d6f3q3f = None
def _get_struct_BH15B3df3d6f3q3f():
    global _struct_BH15B3df3d6f3q3f
    if _struct_BH15B3df3d6f3q3f is None:
        _struct_BH15B3df3d6f3q3f = struct.Struct("<BH15B3df3d6f3q3f")
    return _struct_BH15B3df3d6f3q3f
