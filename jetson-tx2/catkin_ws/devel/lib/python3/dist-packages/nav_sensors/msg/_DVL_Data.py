# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nav_sensors/DVL_Data.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import nav_sensors.msg

class DVL_Data(genpy.Message):
  _md5sum = "97ac2a86c0b276ba205c91f67abbbc93"
  _type = "nav_sensors/DVL_Data"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """

geometry_msgs/Vector3 velocity # Velocity in m/s of the DVL relative tothe bottom X,Y,Z and Error components
float32 vel_error

geometry_msgs/Point position

nav_sensors/DVL_Beams beams # Range in meters from the DVL to the bottom as determined by each Beam 1-4 (in meters)
#float32 range_beam1
#float32 range_beam2
#float32 range_beam3
#float32 range_beam4

float32 mean_bottom_range # Calculated mean range (in meters) to bottom based on valid beams
float32 speed_of_sound # The speed of sound (in m/s) used for the doppler processing
int64 BT_status # Combines amplitude/correlation erroes and three beam solution information
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: nav_sensors/DVL_Beams
float32 beam1
float32 beam2
float32 beam3
float32 beam4"""
  __slots__ = ['velocity','vel_error','position','beams','mean_bottom_range','speed_of_sound','BT_status']
  _slot_types = ['geometry_msgs/Vector3','float32','geometry_msgs/Point','nav_sensors/DVL_Beams','float32','float32','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       velocity,vel_error,position,beams,mean_bottom_range,speed_of_sound,BT_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DVL_Data, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.vel_error is None:
        self.vel_error = 0.
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.beams is None:
        self.beams = nav_sensors.msg.DVL_Beams()
      if self.mean_bottom_range is None:
        self.mean_bottom_range = 0.
      if self.speed_of_sound is None:
        self.speed_of_sound = 0.
      if self.BT_status is None:
        self.BT_status = 0
    else:
      self.velocity = geometry_msgs.msg.Vector3()
      self.vel_error = 0.
      self.position = geometry_msgs.msg.Point()
      self.beams = nav_sensors.msg.DVL_Beams()
      self.mean_bottom_range = 0.
      self.speed_of_sound = 0.
      self.BT_status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3df3d6fq().pack(_x.velocity.x, _x.velocity.y, _x.velocity.z, _x.vel_error, _x.position.x, _x.position.y, _x.position.z, _x.beams.beam1, _x.beams.beam2, _x.beams.beam3, _x.beams.beam4, _x.mean_bottom_range, _x.speed_of_sound, _x.BT_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.beams is None:
        self.beams = nav_sensors.msg.DVL_Beams()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.velocity.x, _x.velocity.y, _x.velocity.z, _x.vel_error, _x.position.x, _x.position.y, _x.position.z, _x.beams.beam1, _x.beams.beam2, _x.beams.beam3, _x.beams.beam4, _x.mean_bottom_range, _x.speed_of_sound, _x.BT_status,) = _get_struct_3df3d6fq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3df3d6fq().pack(_x.velocity.x, _x.velocity.y, _x.velocity.z, _x.vel_error, _x.position.x, _x.position.y, _x.position.z, _x.beams.beam1, _x.beams.beam2, _x.beams.beam3, _x.beams.beam4, _x.mean_bottom_range, _x.speed_of_sound, _x.BT_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.beams is None:
        self.beams = nav_sensors.msg.DVL_Beams()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.velocity.x, _x.velocity.y, _x.velocity.z, _x.vel_error, _x.position.x, _x.position.y, _x.position.z, _x.beams.beam1, _x.beams.beam2, _x.beams.beam3, _x.beams.beam4, _x.mean_bottom_range, _x.speed_of_sound, _x.BT_status,) = _get_struct_3df3d6fq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3df3d6fq = None
def _get_struct_3df3d6fq():
    global _struct_3df3d6fq
    if _struct_3df3d6fq is None:
        _struct_3df3d6fq = struct.Struct("<3df3d6fq")
    return _struct_3df3d6fq
