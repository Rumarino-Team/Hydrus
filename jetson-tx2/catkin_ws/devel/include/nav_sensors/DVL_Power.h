// Generated by gencpp from file nav_sensors/DVL_Power.msg
// DO NOT EDIT!


#ifndef NAV_SENSORS_MESSAGE_DVL_POWER_H
#define NAV_SENSORS_MESSAGE_DVL_POWER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nav_sensors
{
template <class ContainerAllocator>
struct DVL_Power_
{
  typedef DVL_Power_<ContainerAllocator> Type;

  DVL_Power_()
    : input_voltage(0.0)
    , transmit_voltage(0.0)
    , transmit_current(0.0)  {
    }
  DVL_Power_(const ContainerAllocator& _alloc)
    : input_voltage(0.0)
    , transmit_voltage(0.0)
    , transmit_current(0.0)  {
  (void)_alloc;
    }



   typedef float _input_voltage_type;
  _input_voltage_type input_voltage;

   typedef float _transmit_voltage_type;
  _transmit_voltage_type transmit_voltage;

   typedef float _transmit_current_type;
  _transmit_current_type transmit_current;





  typedef boost::shared_ptr< ::nav_sensors::DVL_Power_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nav_sensors::DVL_Power_<ContainerAllocator> const> ConstPtr;

}; // struct DVL_Power_

typedef ::nav_sensors::DVL_Power_<std::allocator<void> > DVL_Power;

typedef boost::shared_ptr< ::nav_sensors::DVL_Power > DVL_PowerPtr;
typedef boost::shared_ptr< ::nav_sensors::DVL_Power const> DVL_PowerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nav_sensors::DVL_Power_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nav_sensors::DVL_Power_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nav_sensors::DVL_Power_<ContainerAllocator1> & lhs, const ::nav_sensors::DVL_Power_<ContainerAllocator2> & rhs)
{
  return lhs.input_voltage == rhs.input_voltage &&
    lhs.transmit_voltage == rhs.transmit_voltage &&
    lhs.transmit_current == rhs.transmit_current;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nav_sensors::DVL_Power_<ContainerAllocator1> & lhs, const ::nav_sensors::DVL_Power_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nav_sensors

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::nav_sensors::DVL_Power_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nav_sensors::DVL_Power_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nav_sensors::DVL_Power_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nav_sensors::DVL_Power_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav_sensors::DVL_Power_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav_sensors::DVL_Power_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nav_sensors::DVL_Power_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aaa18c977dd8bbf8b92f654a90151667";
  }

  static const char* value(const ::nav_sensors::DVL_Power_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaaa18c977dd8bbf8ULL;
  static const uint64_t static_value2 = 0xb92f654a90151667ULL;
};

template<class ContainerAllocator>
struct DataType< ::nav_sensors::DVL_Power_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nav_sensors/DVL_Power";
  }

  static const char* value(const ::nav_sensors::DVL_Power_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nav_sensors::DVL_Power_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float32 input_voltage         # volts\n"
"float32 transmit_voltage # volts\n"
"float32 transmit_current # amps\n"
;
  }

  static const char* value(const ::nav_sensors::DVL_Power_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nav_sensors::DVL_Power_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.input_voltage);
      stream.next(m.transmit_voltage);
      stream.next(m.transmit_current);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DVL_Power_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nav_sensors::DVL_Power_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nav_sensors::DVL_Power_<ContainerAllocator>& v)
  {
    s << indent << "input_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.input_voltage);
    s << indent << "transmit_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.transmit_voltage);
    s << indent << "transmit_current: ";
    Printer<float>::stream(s, indent + "  ", v.transmit_current);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAV_SENSORS_MESSAGE_DVL_POWER_H
