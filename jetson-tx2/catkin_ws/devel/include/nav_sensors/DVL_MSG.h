// Generated by gencpp from file nav_sensors/DVL_MSG.msg
// DO NOT EDIT!


#ifndef NAV_SENSORS_MESSAGE_DVL_MSG_H
#define NAV_SENSORS_MESSAGE_DVL_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <nav_sensors/DVL_Info.h>
#include <nav_sensors/DVL_Data.h>
#include <nav_sensors/DVL_Power.h>
#include <std_msgs/String.h>

namespace nav_sensors
{
template <class ContainerAllocator>
struct DVL_MSG_
{
  typedef DVL_MSG_<ContainerAllocator> Type;

  DVL_MSG_()
    : header()
    , is_valid(false)
    , system_info()
    , data()
    , bit_count(0)
    , bit_code(0)
    , power()
    , serial_number()  {
    }
  DVL_MSG_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , is_valid(false)
    , system_info(_alloc)
    , data(_alloc)
    , bit_count(0)
    , bit_code(0)
    , power(_alloc)
    , serial_number(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _is_valid_type;
  _is_valid_type is_valid;

   typedef  ::nav_sensors::DVL_Info_<ContainerAllocator>  _system_info_type;
  _system_info_type system_info;

   typedef  ::nav_sensors::DVL_Data_<ContainerAllocator>  _data_type;
  _data_type data;

   typedef int64_t _bit_count_type;
  _bit_count_type bit_count;

   typedef int64_t _bit_code_type;
  _bit_code_type bit_code;

   typedef  ::nav_sensors::DVL_Power_<ContainerAllocator>  _power_type;
  _power_type power;

   typedef  ::std_msgs::String_<ContainerAllocator>  _serial_number_type;
  _serial_number_type serial_number;





  typedef boost::shared_ptr< ::nav_sensors::DVL_MSG_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nav_sensors::DVL_MSG_<ContainerAllocator> const> ConstPtr;

}; // struct DVL_MSG_

typedef ::nav_sensors::DVL_MSG_<std::allocator<void> > DVL_MSG;

typedef boost::shared_ptr< ::nav_sensors::DVL_MSG > DVL_MSGPtr;
typedef boost::shared_ptr< ::nav_sensors::DVL_MSG const> DVL_MSGConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nav_sensors::DVL_MSG_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nav_sensors::DVL_MSG_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nav_sensors::DVL_MSG_<ContainerAllocator1> & lhs, const ::nav_sensors::DVL_MSG_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.is_valid == rhs.is_valid &&
    lhs.system_info == rhs.system_info &&
    lhs.data == rhs.data &&
    lhs.bit_count == rhs.bit_count &&
    lhs.bit_code == rhs.bit_code &&
    lhs.power == rhs.power &&
    lhs.serial_number == rhs.serial_number;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nav_sensors::DVL_MSG_<ContainerAllocator1> & lhs, const ::nav_sensors::DVL_MSG_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nav_sensors

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::nav_sensors::DVL_MSG_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nav_sensors::DVL_MSG_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nav_sensors::DVL_MSG_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nav_sensors::DVL_MSG_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav_sensors::DVL_MSG_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav_sensors::DVL_MSG_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nav_sensors::DVL_MSG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b8b06991dd9cca7403c624d30aeebcda";
  }

  static const char* value(const ::nav_sensors::DVL_MSG_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb8b06991dd9cca74ULL;
  static const uint64_t static_value2 = 0x03c624d30aeebcdaULL;
};

template<class ContainerAllocator>
struct DataType< ::nav_sensors::DVL_MSG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nav_sensors/DVL_MSG";
  }

  static const char* value(const ::nav_sensors::DVL_MSG_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nav_sensors::DVL_MSG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"\n"
"\n"
"std_msgs/Header header\n"
"bool is_valid\n"
"nav_sensors/DVL_Info system_info\n"
"nav_sensors/DVL_Data data\n"
"#two unknowns\n"
"int64 bit_count\n"
"int64 bit_code\n"
"nav_sensors/DVL_Power power\n"
"std_msgs/String serial_number\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: nav_sensors/DVL_Info\n"
"\n"
"uint16 packet_count # number of packets\n"
"uint8 packet_id\n"
"uint8 version #\n"
"uint8 system_type # System Type (should be = 76 = 0x4c for Wayfinder DVL)\n"
"uint8 system_subtype # Variant on the system type e.g frequency or transducer type\n"
"uint8 fw_major_version\n"
"uint8 fw_minor_version\n"
"uint8 fw_patch_version\n"
"uint8 fw_build_version\n"
"uint8 year\n"
"uint8 month\n"
"uint8 day\n"
"uint8 hour\n"
"uint8 minute\n"
"uint8 second\n"
"uint8 coordinate_system\n"
"================================================================================\n"
"MSG: nav_sensors/DVL_Data\n"
"\n"
"\n"
"geometry_msgs/Vector3 velocity # Velocity in m/s of the DVL relative tothe bottom X,Y,Z and Error components\n"
"float32 vel_error\n"
"\n"
"geometry_msgs/Point position\n"
"\n"
"nav_sensors/DVL_Beams beams # Range in meters from the DVL to the bottom as determined by each Beam 1-4 (in meters)\n"
"#float32 range_beam1\n"
"#float32 range_beam2\n"
"#float32 range_beam3\n"
"#float32 range_beam4\n"
"\n"
"float32 mean_bottom_range # Calculated mean range (in meters) to bottom based on valid beams\n"
"float32 speed_of_sound # The speed of sound (in m/s) used for the doppler processing\n"
"int64 BT_status # Combines amplitude/correlation erroes and three beam solution information\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: nav_sensors/DVL_Beams\n"
"float32 beam1\n"
"float32 beam2\n"
"float32 beam3\n"
"float32 beam4\n"
"================================================================================\n"
"MSG: nav_sensors/DVL_Power\n"
"\n"
"float32 input_voltage         # volts\n"
"float32 transmit_voltage # volts\n"
"float32 transmit_current # amps\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::nav_sensors::DVL_MSG_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nav_sensors::DVL_MSG_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.is_valid);
      stream.next(m.system_info);
      stream.next(m.data);
      stream.next(m.bit_count);
      stream.next(m.bit_code);
      stream.next(m.power);
      stream.next(m.serial_number);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DVL_MSG_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nav_sensors::DVL_MSG_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nav_sensors::DVL_MSG_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "is_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_valid);
    s << indent << "system_info: ";
    s << std::endl;
    Printer< ::nav_sensors::DVL_Info_<ContainerAllocator> >::stream(s, indent + "  ", v.system_info);
    s << indent << "data: ";
    s << std::endl;
    Printer< ::nav_sensors::DVL_Data_<ContainerAllocator> >::stream(s, indent + "  ", v.data);
    s << indent << "bit_count: ";
    Printer<int64_t>::stream(s, indent + "  ", v.bit_count);
    s << indent << "bit_code: ";
    Printer<int64_t>::stream(s, indent + "  ", v.bit_code);
    s << indent << "power: ";
    s << std::endl;
    Printer< ::nav_sensors::DVL_Power_<ContainerAllocator> >::stream(s, indent + "  ", v.power);
    s << indent << "serial_number: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.serial_number);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAV_SENSORS_MESSAGE_DVL_MSG_H
