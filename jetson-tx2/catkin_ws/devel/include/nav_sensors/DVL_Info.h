// Generated by gencpp from file nav_sensors/DVL_Info.msg
// DO NOT EDIT!


#ifndef NAV_SENSORS_MESSAGE_DVL_INFO_H
#define NAV_SENSORS_MESSAGE_DVL_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nav_sensors
{
template <class ContainerAllocator>
struct DVL_Info_
{
  typedef DVL_Info_<ContainerAllocator> Type;

  DVL_Info_()
    : packet_count(0)
    , packet_id(0)
    , version(0)
    , system_type(0)
    , system_subtype(0)
    , fw_major_version(0)
    , fw_minor_version(0)
    , fw_patch_version(0)
    , fw_build_version(0)
    , year(0)
    , month(0)
    , day(0)
    , hour(0)
    , minute(0)
    , second(0)
    , coordinate_system(0)  {
    }
  DVL_Info_(const ContainerAllocator& _alloc)
    : packet_count(0)
    , packet_id(0)
    , version(0)
    , system_type(0)
    , system_subtype(0)
    , fw_major_version(0)
    , fw_minor_version(0)
    , fw_patch_version(0)
    , fw_build_version(0)
    , year(0)
    , month(0)
    , day(0)
    , hour(0)
    , minute(0)
    , second(0)
    , coordinate_system(0)  {
  (void)_alloc;
    }



   typedef uint16_t _packet_count_type;
  _packet_count_type packet_count;

   typedef uint8_t _packet_id_type;
  _packet_id_type packet_id;

   typedef uint8_t _version_type;
  _version_type version;

   typedef uint8_t _system_type_type;
  _system_type_type system_type;

   typedef uint8_t _system_subtype_type;
  _system_subtype_type system_subtype;

   typedef uint8_t _fw_major_version_type;
  _fw_major_version_type fw_major_version;

   typedef uint8_t _fw_minor_version_type;
  _fw_minor_version_type fw_minor_version;

   typedef uint8_t _fw_patch_version_type;
  _fw_patch_version_type fw_patch_version;

   typedef uint8_t _fw_build_version_type;
  _fw_build_version_type fw_build_version;

   typedef uint8_t _year_type;
  _year_type year;

   typedef uint8_t _month_type;
  _month_type month;

   typedef uint8_t _day_type;
  _day_type day;

   typedef uint8_t _hour_type;
  _hour_type hour;

   typedef uint8_t _minute_type;
  _minute_type minute;

   typedef uint8_t _second_type;
  _second_type second;

   typedef uint8_t _coordinate_system_type;
  _coordinate_system_type coordinate_system;





  typedef boost::shared_ptr< ::nav_sensors::DVL_Info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nav_sensors::DVL_Info_<ContainerAllocator> const> ConstPtr;

}; // struct DVL_Info_

typedef ::nav_sensors::DVL_Info_<std::allocator<void> > DVL_Info;

typedef boost::shared_ptr< ::nav_sensors::DVL_Info > DVL_InfoPtr;
typedef boost::shared_ptr< ::nav_sensors::DVL_Info const> DVL_InfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nav_sensors::DVL_Info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nav_sensors::DVL_Info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nav_sensors::DVL_Info_<ContainerAllocator1> & lhs, const ::nav_sensors::DVL_Info_<ContainerAllocator2> & rhs)
{
  return lhs.packet_count == rhs.packet_count &&
    lhs.packet_id == rhs.packet_id &&
    lhs.version == rhs.version &&
    lhs.system_type == rhs.system_type &&
    lhs.system_subtype == rhs.system_subtype &&
    lhs.fw_major_version == rhs.fw_major_version &&
    lhs.fw_minor_version == rhs.fw_minor_version &&
    lhs.fw_patch_version == rhs.fw_patch_version &&
    lhs.fw_build_version == rhs.fw_build_version &&
    lhs.year == rhs.year &&
    lhs.month == rhs.month &&
    lhs.day == rhs.day &&
    lhs.hour == rhs.hour &&
    lhs.minute == rhs.minute &&
    lhs.second == rhs.second &&
    lhs.coordinate_system == rhs.coordinate_system;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nav_sensors::DVL_Info_<ContainerAllocator1> & lhs, const ::nav_sensors::DVL_Info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nav_sensors

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::nav_sensors::DVL_Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nav_sensors::DVL_Info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nav_sensors::DVL_Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nav_sensors::DVL_Info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav_sensors::DVL_Info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav_sensors::DVL_Info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nav_sensors::DVL_Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0fce5519a2786a76ac927fac228614af";
  }

  static const char* value(const ::nav_sensors::DVL_Info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0fce5519a2786a76ULL;
  static const uint64_t static_value2 = 0xac927fac228614afULL;
};

template<class ContainerAllocator>
struct DataType< ::nav_sensors::DVL_Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nav_sensors/DVL_Info";
  }

  static const char* value(const ::nav_sensors::DVL_Info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nav_sensors::DVL_Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint16 packet_count # number of packets\n"
"uint8 packet_id\n"
"uint8 version #\n"
"uint8 system_type # System Type (should be = 76 = 0x4c for Wayfinder DVL)\n"
"uint8 system_subtype # Variant on the system type e.g frequency or transducer type\n"
"uint8 fw_major_version\n"
"uint8 fw_minor_version\n"
"uint8 fw_patch_version\n"
"uint8 fw_build_version\n"
"uint8 year\n"
"uint8 month\n"
"uint8 day\n"
"uint8 hour\n"
"uint8 minute\n"
"uint8 second\n"
"uint8 coordinate_system\n"
;
  }

  static const char* value(const ::nav_sensors::DVL_Info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nav_sensors::DVL_Info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.packet_count);
      stream.next(m.packet_id);
      stream.next(m.version);
      stream.next(m.system_type);
      stream.next(m.system_subtype);
      stream.next(m.fw_major_version);
      stream.next(m.fw_minor_version);
      stream.next(m.fw_patch_version);
      stream.next(m.fw_build_version);
      stream.next(m.year);
      stream.next(m.month);
      stream.next(m.day);
      stream.next(m.hour);
      stream.next(m.minute);
      stream.next(m.second);
      stream.next(m.coordinate_system);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DVL_Info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nav_sensors::DVL_Info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nav_sensors::DVL_Info_<ContainerAllocator>& v)
  {
    s << indent << "packet_count: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.packet_count);
    s << indent << "packet_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.packet_id);
    s << indent << "version: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.version);
    s << indent << "system_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.system_type);
    s << indent << "system_subtype: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.system_subtype);
    s << indent << "fw_major_version: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fw_major_version);
    s << indent << "fw_minor_version: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fw_minor_version);
    s << indent << "fw_patch_version: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fw_patch_version);
    s << indent << "fw_build_version: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fw_build_version);
    s << indent << "year: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.year);
    s << indent << "month: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.month);
    s << indent << "day: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.day);
    s << indent << "hour: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hour);
    s << indent << "minute: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.minute);
    s << indent << "second: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.second);
    s << indent << "coordinate_system: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.coordinate_system);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAV_SENSORS_MESSAGE_DVL_INFO_H
